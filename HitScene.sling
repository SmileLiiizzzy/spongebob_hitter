class is SpriteSceneWithEntities imports cape imports cave imports motion:

var gameBackground as BackgroundEntity
var spongebob as SpongebobEntity
var sponge as SpongeEntity
var enemyEntities as vector<EnemyEntity>
var spongeEntities as vector<SpongeEntity>
var quitButton as TextureSprite
var lifeSprite as TextSprite
var audioManager as AudioManager
var stream as AudioStream
var height as double
var width as double
var timer as int
var life as int

func initialize override
{
	base.initialize()
	timer = 0
	life = 3
	height = getReferenceHeight()
	width = getReferenceWidth()
	gameBackground = new BackgroundEntity()
	spongebob = new SpongebobEntity()
	addEntity(gameBackground)
	addEntity(spongebob)
	enemyEntities = new vector<EnemyEntity>
	spongeEntities = new vector<SpongeEntity>
	quitButton = addTextureSpriteForSize(createTextureForImageResource("quitbutton"), 0.2 * width, 0.1 * height)
	var txtProp = TextProperties.forText("Life:")
	txtProp.setFontSizeRelative(20.0)
	lifeSprite = addTextSprite(txtProp)
	lifeSprite.move(0.9 * width, 0.0)
	audioManager = AudioManager.forApplication(context)
	if(audioManager != null) {
		stream = audioManager.getStreamForResource("bmusic")
	}
	quitButton.move(0.95 * width - quitButton.getWidth(), 0.9 * height)
	onTimeToPlayStream()
}

func getContext as ApplicationContext
{
	return context
}

func removeEnemyEntity(m as EnemyEntity) as void
{
	removeEntity(m)
	Vector.removeValue(enemyEntities, m)
}

func removeSpongeEntity(s as SpongeEntity) as void
{
	removeEntity(s)
	Vector.removeValue(spongeEntities, s)
}

func getEnemyEntities as vector<EnemyEntity>
{
	return enemyEntities
}

func getSpongeEntities as vector<SpongeEntity>
{
	return spongeEntities
}

func getSpongebob as SpongebobEntity
{
	return spongebob
}

func subtractLife(n as int)
{
	life -= n
}

func getSponge as SpongeEntity
{
	return sponge
}

func spongeBullet
{
	var sponge = new SpongeEntity()
	addEntity(sponge)
	spongeEntities += sponge
}

func mainMenu
{
	pushScene(new MainScene())
}

func tick(gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	timer++
	lifeSprite.setText(String.append("Life: ", life))
	if((timer % 500) == 0) {
		var enemy = new EnemyEntity()
		addEntity(enemy)
		enemyEntities += enemy
	}
	if(life == 0) {
		pushScene(new GameOverScene())
	}
}

func stopStream
{
	if(stream != null) {
		stream.stop()
	}
}

func onTimeToPlayStream
{
	if(stream != null) {
		stream.play()
		stream.setLooping(true)
	}
}

func onPointerEvent(event as PointerEvent) override
{
	base.onPointerEvent(event)
	if(event.isConsumed) {
		return
	}
	if(event.action == PointerEvent.DOWN) {
		if(event.isInside(quitButton.getX(), quitButton.getY(), quitButton.getWidth(), quitButton.getHeight())) {
			mainMenu()
		}
	}
}

func cleanup override
{
	removeAllSprites()
	stopStream()
}
